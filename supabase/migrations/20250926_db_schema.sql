-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.accounting_periods (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  type USER-DEFINED NOT NULL,
  period_date date NOT NULL,
  status USER-DEFINED NOT NULL DEFAULT 'open'::accounting_period_status,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone,
  closed_by uuid,
  closed_at timestamp with time zone,
  reopened_by uuid,
  reopened_at timestamp with time zone,
  league_group_id uuid,
  game_day numeric,
  season text,
  CONSTRAINT accounting_periods_pkey PRIMARY KEY (id),
  CONSTRAINT accounting_periods_closed_by_fkey FOREIGN KEY (closed_by) REFERENCES public.profiles(id),
  CONSTRAINT accounting_periods_reopened_by_fkey FOREIGN KEY (reopened_by) REFERENCES public.profiles(id),
  CONSTRAINT accounting_periods_league_group_id_fkey FOREIGN KEY (league_group_id) REFERENCES public.league_groups(id)
);
CREATE TABLE public.app_settings_versions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  version integer NOT NULL,
  indemnity_rates jsonb NOT NULL,
  price_per_km numeric NOT NULL CHECK (price_per_km >= 0::numeric),
  official_categories ARRAY NOT NULL DEFAULT '{}'::text[],
  roles ARRAY NOT NULL DEFAULT '{}'::text[],
  seasons ARRAY NOT NULL DEFAULT '{}'::text[],
  is_active boolean NOT NULL DEFAULT false,
  valid_from timestamp with time zone NOT NULL DEFAULT now(),
  valid_to timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  created_by uuid NOT NULL,
  notes text,
  optimization_settings jsonb NOT NULL DEFAULT '{"bufferMin": 30, "travelSpeedKmph": 70, "categoryGradeMap": {}, "defaultMatchRisk": 1, "matchDurationMin": 120, "categoryCapacityMap": {}}'::jsonb,
  rejection_reasons ARRAY,
  updated_at timestamp with time zone,
  updated_by uuid,
  financial_settings jsonb,
  disciplinary_settings jsonb,
  CONSTRAINT app_settings_versions_pkey PRIMARY KEY (id),
  CONSTRAINT app_settings_versions_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id),
  CONSTRAINT app_settings_versions_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.profiles(id)
);
CREATE TABLE public.audit_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  user_id uuid,
  user_name character varying,
  user_email character varying,
  action character varying NOT NULL,
  table_name character varying,
  record_id uuid,
  old_values jsonb,
  new_values jsonb,
  ip_address text,
  user_agent text,
  CONSTRAINT audit_logs_pkey PRIMARY KEY (id),
  CONSTRAINT audit_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.export_jobs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  type text NOT NULL,
  params jsonb NOT NULL,
  status USER-DEFINED NOT NULL DEFAULT 'pending'::export_job_status,
  progress integer NOT NULL DEFAULT 0 CHECK (progress >= 0 AND progress <= 100),
  file_path text,
  file_size_bytes bigint,
  error_message text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  started_at timestamp with time zone,
  finished_at timestamp with time zone,
  requested_by uuid,
  expires_at timestamp with time zone,
  CONSTRAINT export_jobs_pkey PRIMARY KEY (id),
  CONSTRAINT export_jobs_requested_by_fkey FOREIGN KEY (requested_by) REFERENCES auth.users(id)
);
CREATE TABLE public.job_items (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  job_id uuid NOT NULL,
  seq integer NOT NULL,
  target jsonb NOT NULL,
  status text NOT NULL DEFAULT 'pending'::text,
  error_code text,
  error_message text,
  started_at timestamp with time zone,
  finished_at timestamp with time zone,
  CONSTRAINT job_items_pkey PRIMARY KEY (id),
  CONSTRAINT job_items_job_id_fkey FOREIGN KEY (job_id) REFERENCES public.jobs(id)
);
CREATE TABLE public.jobs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  type text NOT NULL,
  status text NOT NULL DEFAULT 'pending'::text,
  payload jsonb NOT NULL,
  result jsonb,
  progress integer NOT NULL DEFAULT 0 CHECK (progress >= 0 AND progress <= 100),
  total integer NOT NULL DEFAULT 1,
  created_by uuid,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  priority integer NOT NULL DEFAULT 100,
  phase text,
  phase_progress integer NOT NULL DEFAULT 0 CHECK (phase_progress >= 0 AND phase_progress <= 100),
  attempts integer NOT NULL DEFAULT 0 CHECK (attempts >= 0),
  dedupe_key text,
  artifact_path text,
  artifact_type text,
  error_code text,
  label text NOT NULL,
  scope text,
  completed integer DEFAULT 0,
  artifact_url text,
  error_message text,
  duration_ms integer,
  next_retry_at timestamp with time zone,
  dependencies ARRAY,
  retry_policy jsonb,
  meta jsonb NOT NULL DEFAULT '{}'::jsonb,
  priority_text text DEFAULT 'normal'::text CHECK (priority_text = ANY (ARRAY['low'::text, 'normal'::text, 'high'::text, 'urgent'::text])),
  CONSTRAINT jobs_pkey PRIMARY KEY (id),
  CONSTRAINT jobs_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.league_group_teams (
  league_group_id uuid NOT NULL,
  team_id uuid NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT league_group_teams_pkey PRIMARY KEY (team_id, league_group_id),
  CONSTRAINT league_group_teams_league_group_id_fkey FOREIGN KEY (league_group_id) REFERENCES public.league_groups(id),
  CONSTRAINT league_group_teams_team_id_fkey FOREIGN KEY (team_id) REFERENCES public.teams(id)
);
CREATE TABLE public.league_groups (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL,
  code character varying,
  league_id uuid NOT NULL,
  season character varying NOT NULL,
  is_active boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  created_by uuid NOT NULL,
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_by uuid NOT NULL,
  name_ar text,
  CONSTRAINT league_groups_pkey PRIMARY KEY (id),
  CONSTRAINT league_groups_league_id_fkey FOREIGN KEY (league_id) REFERENCES public.leagues(id),
  CONSTRAINT league_groups_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id),
  CONSTRAINT league_groups_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id)
);
CREATE TABLE public.leagues (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL,
  code character varying UNIQUE,
  level integer NOT NULL CHECK (level >= 1),
  parent_league_id uuid,
  is_active boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  created_by uuid NOT NULL,
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_by uuid NOT NULL,
  name_ar text,
  CONSTRAINT leagues_pkey PRIMARY KEY (id),
  CONSTRAINT leagues_parent_league_id_fkey FOREIGN KEY (parent_league_id) REFERENCES public.leagues(id),
  CONSTRAINT leagues_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id),
  CONSTRAINT leagues_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id)
);
CREATE TABLE public.location_distances (
  from_location_id uuid NOT NULL,
  to_location_id uuid NOT NULL,
  distance_km numeric NOT NULL CHECK (distance_km >= 0::numeric),
  computed_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT location_distances_pkey PRIMARY KEY (to_location_id, from_location_id),
  CONSTRAINT location_distances_from_location_id_fkey FOREIGN KEY (from_location_id) REFERENCES public.locations(id),
  CONSTRAINT location_distances_to_location_id_fkey FOREIGN KEY (to_location_id) REFERENCES public.locations(id)
);
CREATE TABLE public.locations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  wilaya character varying,
  wilaya code character varying,
  dairas character varying,
  code dairas character varying,
  communes character varying,
  code communes character varying,
  latitude numeric,
  longitude numeric,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  wilaya_ar text,
  daira_ar text,
  commune_ar text,
  CONSTRAINT locations_pkey PRIMARY KEY (id)
);
CREATE TABLE public.match_assignments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  match_id uuid NOT NULL,
  role USER-DEFINED NOT NULL,
  official_id uuid,
  original_official_id uuid,
  is_confirmed boolean NOT NULL DEFAULT false,
  confirmed_at timestamp with time zone,
  travel_distance_km numeric,
  indemnity_amount numeric,
  performance_rating numeric CHECK (performance_rating >= 0::numeric AND performance_rating <= 10::numeric),
  notes text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  created_by uuid NOT NULL,
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_by uuid NOT NULL,
  CONSTRAINT match_assignments_pkey PRIMARY KEY (id),
  CONSTRAINT match_assignments_match_id_fkey FOREIGN KEY (match_id) REFERENCES public.matches(id),
  CONSTRAINT match_assignments_official_id_fkey FOREIGN KEY (official_id) REFERENCES public.officials(id),
  CONSTRAINT match_assignments_original_official_id_fkey FOREIGN KEY (original_official_id) REFERENCES public.officials(id),
  CONSTRAINT match_assignments_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id),
  CONSTRAINT match_assignments_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id)
);
CREATE TABLE public.matches (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  league_group_id uuid NOT NULL,
  season character varying NOT NULL,
  game_day integer NOT NULL CHECK (game_day > 0),
  match_date date,
  match_time time without time zone DEFAULT '16:00:00'::time without time zone,
  status USER-DEFINED NOT NULL DEFAULT 'scheduled'::match_status,
  home_team_id uuid NOT NULL,
  away_team_id uuid NOT NULL,
  stadium_id uuid,
  home_score integer CHECK (home_score >= 0),
  away_score integer CHECK (away_score >= 0),
  attendance integer CHECK (attendance >= 0),
  is_sheet_sent boolean NOT NULL DEFAULT false,
  has_unsent_changes boolean NOT NULL DEFAULT false,
  is_archived boolean NOT NULL DEFAULT false,
  notes text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  created_by uuid NOT NULL,
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_by uuid NOT NULL,
  accounting_status USER-DEFINED NOT NULL DEFAULT 'not_entered'::accounting_status,
  rejection_comment text,
  validated_by uuid,
  validated_at timestamp with time zone,
  accounting_period_id uuid,
  rejection_reason text,
  CONSTRAINT matches_pkey PRIMARY KEY (id),
  CONSTRAINT matches_league_group_id_fkey FOREIGN KEY (league_group_id) REFERENCES public.league_groups(id),
  CONSTRAINT matches_home_team_id_fkey FOREIGN KEY (home_team_id) REFERENCES public.teams(id),
  CONSTRAINT matches_away_team_id_fkey FOREIGN KEY (away_team_id) REFERENCES public.teams(id),
  CONSTRAINT matches_stadium_id_fkey FOREIGN KEY (stadium_id) REFERENCES public.stadiums(id),
  CONSTRAINT matches_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id),
  CONSTRAINT matches_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id),
  CONSTRAINT matches_validated_by_fkey FOREIGN KEY (validated_by) REFERENCES public.profiles(id)
);
CREATE TABLE public.mission_order_batches (
  hash text NOT NULL,
  status text NOT NULL CHECK (status = ANY (ARRAY['pending'::text, 'processing'::text, 'completed'::text, 'failed'::text])),
  orders_json jsonb NOT NULL,
  artifact_path text,
  error text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT mission_order_batches_pkey PRIMARY KEY (hash)
);
CREATE TABLE public.mission_orders (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  order_number bigint NOT NULL UNIQUE,
  match_id uuid NOT NULL,
  official_id uuid NOT NULL,
  pdf_storage_path text,
  data_hash text,
  data_snapshot jsonb,
  CONSTRAINT mission_orders_pkey PRIMARY KEY (id)
);
CREATE TABLE public.official_unavailabilities (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  official_id uuid NOT NULL,
  start_date date NOT NULL,
  end_date date NOT NULL,
  reason text,
  is_approved boolean DEFAULT false,
  approved_by uuid,
  approved_at timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  created_by uuid NOT NULL,
  CONSTRAINT official_unavailabilities_pkey PRIMARY KEY (id),
  CONSTRAINT official_unavailabilities_official_id_fkey FOREIGN KEY (official_id) REFERENCES public.officials(id),
  CONSTRAINT official_unavailabilities_approved_by_fkey FOREIGN KEY (approved_by) REFERENCES auth.users(id),
  CONSTRAINT official_unavailabilities_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.officials (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  first_name character varying NOT NULL,
  last_name character varying NOT NULL,
  full_name character varying DEFAULT (((first_name)::text || ' '::text) || (last_name)::text),
  category USER-DEFINED NOT NULL DEFAULT 'Arbitre inter-ligues (régional)'::official_category,
  location text,
  email character varying UNIQUE,
  phone character varying,
  date_of_birth date,
  nationality character varying,
  rating numeric CHECK (rating >= 0::numeric AND rating <= 10::numeric),
  is_active boolean NOT NULL DEFAULT true,
  is_archived boolean NOT NULL DEFAULT false,
  user_id uuid UNIQUE,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  created_by uuid,
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_by uuid,
  bank_account_number text,
  address text,
  position bigint,
  location_id uuid,
  first_name_ar character varying,
  last_name_ar character varying,
  CONSTRAINT officials_pkey PRIMARY KEY (id),
  CONSTRAINT officials_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT officials_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id),
  CONSTRAINT officials_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id),
  CONSTRAINT fk_officials_location FOREIGN KEY (location_id) REFERENCES public.locations(id)
);
CREATE TABLE public.payment_batches (
  id uuid NOT NULL,
  reference text NOT NULL,
  total_amount numeric NOT NULL,
  payment_count integer NOT NULL,
  debit_account_number text NOT NULL,
  transaction_id text,
  proof_of_payment_url text,
  proof_of_payment_filename text,
  CONSTRAINT payment_batches_pkey PRIMARY KEY (id),
  CONSTRAINT payment_batches_id_fkey FOREIGN KEY (id) REFERENCES public.accounting_periods(id)
);
CREATE TABLE public.players (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  first_name text NOT NULL,
  last_name text NOT NULL,
  full_name text NOT NULL DEFAULT ((first_name || ' '::text) || last_name),
  date_of_birth date,
  license_number text UNIQUE,
  current_team_id uuid,
  is_archived boolean NOT NULL DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  created_by uuid,
  updated_at timestamp with time zone,
  updated_by uuid,
  CONSTRAINT players_pkey PRIMARY KEY (id),
  CONSTRAINT players_current_team_id_fkey FOREIGN KEY (current_team_id) REFERENCES public.teams(id),
  CONSTRAINT players_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.profiles(id),
  CONSTRAINT players_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.profiles(id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  email character varying UNIQUE,
  full_name character varying,
  avatar_url text,
  phone character varying,
  team_id uuid,
  is_active boolean NOT NULL DEFAULT true,
  last_login_at timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  official_id uuid,
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id),
  CONSTRAINT profiles_team_id_fkey FOREIGN KEY (team_id) REFERENCES public.teams(id),
  CONSTRAINT profiles_official_id_fkey FOREIGN KEY (official_id) REFERENCES public.officials(id)
);
CREATE TABLE public.result (
  jsonb_build_object jsonb
);
CREATE TABLE public.roles (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL UNIQUE,
  description text,
  permissions jsonb NOT NULL DEFAULT '[]'::jsonb,
  is_system boolean NOT NULL DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT roles_pkey PRIMARY KEY (id)
);
CREATE TABLE public.sanctions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  player_id uuid NOT NULL,
  match_id uuid,
  type USER-DEFINED NOT NULL,
  reason text,
  decision_date date NOT NULL DEFAULT now(),
  suspension_matches integer NOT NULL DEFAULT 0,
  fine_amount numeric,
  matches_served integer NOT NULL DEFAULT 0,
  is_cancelled boolean NOT NULL DEFAULT false,
  notes text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  created_by uuid,
  updated_at timestamp without time zone DEFAULT now(),
  updated_by uuid,
  CONSTRAINT sanctions_pkey PRIMARY KEY (id),
  CONSTRAINT sanctions_player_id_fkey FOREIGN KEY (player_id) REFERENCES public.players(id),
  CONSTRAINT sanctions_match_id_fkey FOREIGN KEY (match_id) REFERENCES public.matches(id),
  CONSTRAINT sanctions_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.profiles(id),
  CONSTRAINT sanctions_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.profiles(id)
);
CREATE TABLE public.stadiums (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  code text UNIQUE,
  name character varying NOT NULL,
  location text,
  latitude numeric,
  longitude numeric,
  capacity integer CHECK (capacity > 0),
  surface_type character varying,
  is_archived boolean NOT NULL DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  created_by uuid,
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_by uuid,
  location_id uuid,
  name_ar character varying,
  CONSTRAINT stadiums_pkey PRIMARY KEY (id),
  CONSTRAINT stadiums_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id),
  CONSTRAINT stadiums_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id),
  CONSTRAINT fk_stadiums_location FOREIGN KEY (location_id) REFERENCES public.locations(id)
);
CREATE TABLE public.team_stadiums (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  team_id uuid NOT NULL,
  stadium_id uuid NOT NULL,
  season text NOT NULL,
  created_by uuid,
  updated_by uuid,
  CONSTRAINT team_stadiums_pkey PRIMARY KEY (id),
  CONSTRAINT team_stadiums_team_id_fkey FOREIGN KEY (team_id) REFERENCES public.teams(id),
  CONSTRAINT team_stadiums_stadium_id_fkey FOREIGN KEY (stadium_id) REFERENCES public.stadiums(id),
  CONSTRAINT team_stadiums_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.profiles(id),
  CONSTRAINT team_stadiums_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.profiles(id)
);
CREATE TABLE public.teams (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  code character varying NOT NULL UNIQUE,
  name character varying NOT NULL,
  full_name character varying,
  logo_url text,
  primary_color character varying,
  secondary_color character varying,
  founded_year integer,
  is_archived boolean NOT NULL DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  created_by uuid,
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_by uuid,
  name_ar character varying,
  CONSTRAINT teams_pkey PRIMARY KEY (id),
  CONSTRAINT teams_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id),
  CONSTRAINT teams_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id)
);
CREATE TABLE public.user_roles (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  role_id uuid NOT NULL,
  assigned_at timestamp with time zone NOT NULL DEFAULT now(),
  assigned_by uuid NOT NULL,
  expires_at timestamp with time zone,
  updated_by uuid,
  CONSTRAINT user_roles_pkey PRIMARY KEY (id),
  CONSTRAINT user_roles_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT user_roles_role_id_fkey FOREIGN KEY (role_id) REFERENCES public.roles(id),
  CONSTRAINT user_roles_assigned_by_fkey FOREIGN KEY (assigned_by) REFERENCES auth.users(id),
  CONSTRAINT user_roles_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id)
);